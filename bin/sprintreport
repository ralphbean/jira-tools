#!/usr/bin/env python
""" Generate a sprint report """

import argparse
import logging
import sys

import sprintreport


def get_args():
    """
    Parse args from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "team_project",
        help="Name of the project to report on",
    )
    parser.add_argument(
        "--sprint-start",
        default="-2w",
        help="The start of the sprint",
    )
    parser.add_argument(
        "--output-file",
        default="output.md",
        help="Location to write output",
    )
    parser.add_argument(
        "--debug",
        default=False,
        action="store_true",
        help="Emit extra debug information to stdout",
    )
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    log = logging.getLogger("sprintreport")

    try:
        JIRA = sprintreport.JiraClient()
    except KeyError as e:
        log.error(str(e))
        sys.exit(1)

    # TODO, permit passing in jql explicitly
    jql = f"project={args.team_project}"

    log.info(f"Gathering issues from JIRA using: {jql}")
    orphan_issues, orphan_epics, features = JIRA.gather_issues(jql, args.sprint_start)
    log.info(f"Gathering dependencies from JIRA using: {jql}")
    incoming, outgoing = JIRA.gather_dependencies(jql)
    log.info(f"Rendering report")
    output = sprintreport.render(
        orphan_issues, orphan_epics, features, incoming, outgoing
    )
    log.info(f"Writing output to {args.output_file}")
    with open(args.output_file, 'w') as f:
        f.write(output)
