#!/usr/bin/env python
""" Print a report on a JIRA's children over some time period """

import argparse
import datetime
import logging
import sys

import tools.client

FOUR_WEEKS_AGO = str((datetime.datetime.today() - datetime.timedelta(days=28)).date())


def get_args():
    """
    Parse args from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "parent",
        help="A JIRA parent on which to report",
    )
    parser.add_argument(
        "--since",
        default=FOUR_WEEKS_AGO,
        help="How long back in history to go searching for changes",
    )
    parser.add_argument(
        "--constraint",
        default="type=Feature and project=RHTAP",
        help="Further constraint on the query",
    )
    parser.add_argument(
        "--debug",
        default=False,
        action="store_true",
        help="Emit extra debug information to stdout",
    )
    return parser.parse_args()


def to_date(datestring):
    return datetime.date(
        *map(int, datestring.split("T")[0].split("-"))
    )


if __name__ == '__main__':
    args = get_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    log = logging.getLogger("child-changes")

    try:
        JIRA = tools.client.JiraClient()
    except KeyError as e:
        log.error(str(e))
        sys.exit(1)

    since = to_date(args.since)
    target = args.parent
    target = target.upper()
    parent = JIRA._get(target)
    query = f'"Parent Link" = {target}'
    if args.constraint:
        query = f"{query} and {args.constraint}"
    log.debug(f"Gathering issues from JIRA using: {query}")
    issues = JIRA._search(query)

    creations, removals, additions = [], [], []
    for issue in issues:
        if to_date(issue.fields.created) >= since:
            creations.append(issue)
            continue
        for event in issue.changelog.histories:
            if to_date(event.created) < since:
                continue
            for change in event.items:
                if change.field != 'Parent Link':
                    continue
                fromstring = change.fromString or ''
                tostring = change.toString or ''
                if fromstring.startswith(target) and tostring.startswith(target):
                    continue
                if not fromstring.startswith(target) and tostring.startswith(target):
                    additions.append((issue, event))

    if args.constraint:
        query = f"{args.constraint}"
    log.debug(f"Gathering issues from JIRA using: {query}")
    issues = JIRA._search(query)
    for issue in issues:
        for event in issue.changelog.histories:
            if to_date(event.created) < since:
                continue
            for change in event.items:
                if change.field != 'Parent Link':
                    continue
                fromstring = change.fromString or ''
                tostring = change.toString or ''
                if fromstring.startswith(target) and not tostring.startswith(target):
                    removals.append((issue, event))

    url = tools.client.url

    print(f"# Changes to the {target} parent since **{since}**")
    print()
    print(f"## {parent.fields.summary}")
    print()

    if creations or additions:
        print(f"## Additions ({len(creations) + len(additions)})")
        print()

    sorter = lambda issue: issue.fields.created
    for issue in sorted(creations, key=sorter, reverse=True):
        date = to_date(issue.fields.created)
        print(f"* [{issue.fields.reporter}]({url}/secure/ViewProfile.jspa?name={issue.fields.reporter.name}) created [{issue.key}]({url}/browse/{issue.key}) on **{date}**")

    sorter = lambda pair: pair[1].created
    for issue, event in sorted(additions, key=sorter, reverse=True):
        date = event.created.split('T')[0]
        print(f"* [{event.author}]({url}/secure/ViewProfile.jspa?name={event.author.name}) added [{issue.key}]({url}/browse/{issue.key}) [{target}]({url}/browse/{target}) on **{date}**")

    if removals:
        print(f"## Removals ({len(removals)})")
        print()

    sorter = lambda pair: pair[1].created
    for issue, event in sorted(removals, key=sorter, reverse=True):
        date = event.created.split('T')[0]
        print(f"* [{event.author}]({url}/secure/ViewProfile.jspa?name={event.author.name}) removed [{issue.key}]({url}/browse/{issue.key}) from [{target}]({url}/browse/{target}) on **{date}**")

    if not creations and not removals and not additions:
        print(f"There have been no child JIRAs added or removed from the parent [{target}]({url}/browse/{target}) since {since}.")
